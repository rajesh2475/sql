Aggregate functions are often used with the GROUP BY clause of the SELECT statement. The GROUP BY clause splits the result-set into groups of values and the aggregate function can be used to return a single value for each group.

The most commonly used SQL aggregate functions are:

MIN() - returns the smallest value within the selected column
MAX() - returns the largest value within the selected column
COUNT() - returns the number of rows in a set
SUM() - returns the total sum of a numerical column
AVG() - returns the average value of a numerical column
Aggregate functions ignore null values (except for COUNT()).

select * from orders limit 10;

select * from orders limit 1,1;  // SQL
select * from orders limit 1, offset 1; // Postgres
select count(*) from orders;

order by desc or asc (default)

select destinct order_statue from orders;
select * from orders where order_statue = "COMPLETE" or order_statue = "CLOSED";

select to_char(order_date, 'YYYY-MM') as order_month, count (*) as order_count from orders where order_status in ('COMPLETE', 'CLOSED') group by 1 order by 2;   - here 1 refers ro first column of results in select

select order_item_order_id, round(sum(order_item_subtotal)::numeric, 2) as order_revenue from order_items group by 1 order by 1;


Create table daily_product_revinue as
select  o.order_date, oi.order_item_product_id, 
round(sum(order_item_subtotal)::numeric, 2) as order_revinue from orders as o
inner join order_items as oi on o.order_id = oi.order_item_product_id
where o.order_status in ('CLOSED', 'COMPLETE')
group by o.order_date, oi.order_item_product_id;

select dpr.*, rank() over (order by order_revinue desc) as rnk, dense_rank() over (order by order_revinue desc) as drnk 
from daily_product_revinue as dpr where order_date = '2013-07-29 00:00:00' order by order_revinue desc



Order of query             order of execution
Select                     From 
From                       Where
Where                      group by           Note - Here group by and select can work together (in case of Aggregate functions)
group by                   select 
order by                   order by


select to_char(order_date, 'YYYY-MM') as order_month, count (*) as order_count from orders where order_status in ('COMPLETE', 'CLOSED') group by 1 Having count (*) > 1000 order by 2


select order_status, order_item_order_id, round(sum(order_item_subtotal)::numeric, 2) as order_revenue from orders 
inner join order_items on order_id = order_item_order_id
where order_status in ('COMPLETE', 'CLOSED')
group by 1,2 order by 3


select to_char(order_date, 'YYYY-MM') as order_month, order_item_order_id, round(sum(order_item_subtotal)::numeric, 2) as order_revenue from orders 
inner join order_items on order_id = order_item_order_id
where order_status in ('COMPLETE', 'CLOSED')
group by 1,2 order by 3


Working 
  SELECT *
  FROM products AS p
  WHERE NOT EXISTS (
    SELECT 1
    FROM order_details_v AS odv
    WHERE p.product_id = odv.order_item_product_id
      AND TO_CHAR(odv.order_date::timestamp, 'YYYY-MM') = '2014-02'
  );
  
  SELECT *
  FROM products AS p
  LEFT OUTER JOIN order_details_v AS odv
  ON p.product_id = odv.order_item_product_id
  WHERE odv.order_item_product_id IS NULL
     OR (TO_CHAR(odv.order_date::timestamp, 'YYYY-MM') = '2014-02');

Not working 
SELECT *
FROM products AS p
LEFT OUTER JOIN order_details_v AS odv
ON p.product_id = odv.order_item_product_id
WHERE TO_CHAR(odv.order_date::timestamp, 'YYYY-MM') = '2014-02'
  AND odv.order_item_product_id IS NULL;


# views
1. views do not hold any data
2. We create views using queries against the tables
3. we typically create views for commonly used queries

EX 
Create view <view name> as 
Quary

To recreate the view we use
Create or replace view <view name> as 
Quary



CTE (common table expression)
Ex 
with <name_of_the_query> as 
Query

CTE is similar to views but they don't store definition within the database, Once We restart the session CTE will be deleted. 

# ctas (create table as results)

DROP TABLE daily_revinue;
Create table daily_revinue
as 
select o.order_date, round(sum(oi.order_item_subtotal):: numeric, 2) as order_revinue
from orders as o
join order_items as oi
on o.order_id = oi.order_item_order_id
where o.order_status in ('CLOSED', 'COMPLETE')
group by 1

select to_char(dr.order_date::timestamp, 'YYYY-MM'), 
dr.order_date ,  dr.order_revinue,  sum(dr.order_revinue) as  
monthly_order_revinue from daily_revinue as dr
group by 1, 2, 3

# PARTITION and over
select to_char(dr.order_date::timestamp, 'YYYY-MM') as order_months, 
dr.order_date ,  dr.order_revinue,  sum(dr.order_revinue) over (PARTITION by to_char(dr.order_date::timestamp, 'YYYY-MM')) as  
monthly_order_revinue from daily_revinue as dr









